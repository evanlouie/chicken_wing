<!DOCTYPE html>

<!-- <script src='/js/three/three.min.js'></script> -->
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r69/three.min.js"></script>
<!-- <link href='http://fonts.googleapis.com/css?family=Lato:400,700,900' rel='stylesheet' type='text/css'> -->
<link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" rel="stylesheet">
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
<script src='/js/three/FirstPersonControls.js'></script>
<script src='/js/three/CombinedCamera.js'></script>

<!--<script src='threex.dynamictexture.js'></script>-->
              <!-- skybox shaders -->
        <script type="application/x-glsl" id="sky-vertex">
        varying vec2 vUV;

        void main() {
          vUV = uv;
          vec4 pos = vec4(position, 1.0);
          gl_Position = projectionMatrix * modelViewMatrix * pos;
        }
        </script>

        <script type="application/x-glsl" id="sky-fragment">
        uniform sampler2D texture;
        varying vec2 vUV;

        void main() {
          vec4 sample = texture2D(texture, vUV);
          gl_FragColor = vec4(sample.xyz, sample.w);
        }
        </script>
        <!-- /skybox shaders -->
<style type="text/css">

/*    body {
        background:#61443e;
        background-color: #efd1b5;
        color: #fff;
        padding:0;
        margin:0;
        overflow:hidden;
        font-family: 'Lato', sans-serif;
        font-size:1em;
        text-align: center;
    }*/
    #info {
        position: absolute;
        bottom: 0px; width: 100%;
        padding: 5px;
        /*text-align: center;*/
        z-index:100;
        color: white;
    }

    a {
        color: orange;
        text-decoration: none;
    }

    a:hover {
        color: #0080ff;
    }

</style>

<body>
<div id="info" style="background: rgba(0,0,0,0.5);">
  <strong>Revision:</strong> <div id="p1">0</div></br>
  <strong>Name:</strong> <div id="file_name">NULL</div></br>
  <strong>Lines:</strong> <div id="line_count">NULL</div></br>
  <strong>Smells:</strong> <div id="smell_count">NULL</div>

</div>
<script>

    //ALL THE JSON STUFF
    var data = <%= @project.html_safe %>;
    var seed = 0x811c9dc5;
    var wireframe = false; 
    var mouse = new THREE.Vector2(), INTERSECTED;
    var radius = 100, theta = 0;

    // MY HASHING FUNCTION
    function hashFnv32a(str, asString, seed) {
        /*jshint bitwise:false */
        var i, l,
                hval = (seed === undefined) ? 0x811c9dc5 : seed;

        for (i = 0, l = str.length; i < l; i++) {
            hval ^= str.charCodeAt(i);
            hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);
        }
        if( asString ){
            // Convert to 8 digit hex string
            return ("0000000" + (hval >>> 0).toString(16)).substr(-8);
        }
        return hval >>> 0;
    }



    function getTileCoordinatesx(tileNum){
        var intRoot=Math.floor(Math.sqrt(tileNum));
        var x=(Math.round(intRoot/2)*Math.pow(-1,intRoot+1))+(Math.pow(-1,intRoot+1)*(((intRoot*(intRoot+1))-tileNum)-Math.abs((intRoot*(intRoot+1))-tileNum))/2);
        return x;
    }

    function getTileCoordinatesy(tileNum){
        var intRoot=Math.floor(Math.sqrt(tileNum));
        var y=(Math.round(intRoot/2)*Math.pow(-1,intRoot))+(Math.pow(-1,intRoot+1)*(((intRoot*(intRoot+1))-tileNum)+Math.abs((intRoot*(intRoot+1))-tileNum))/2);

        return y;
    }

    //intialize scene and camera and stuff
    var updateFcts	= [];
    var scene = new THREE.Scene(); // Create a Three.js scene object.
    //scene.fog	= new THREE.FogExp2( 0xd0e0f0, 0.001);
    // scene.fog = new THREE.FogExp2( 0xefd1b5, 0.001 );
    var camera	= new THREE.CombinedCamera(window.innerWidth/2, window.innerHeight/2, 70,1,10000,-10000,10000); // Define the perspective camera's attributes.
    // var renderer = window.WebGLRenderingContext ? new THREE.WebGLRenderer() : new THREE.CanvasRenderer(); // Fallback to canvas renderer, if necessary.
    var renderer = new THREE.WebGLRenderer();
                renderer.setClearColor( 0xefd1b5 );
                renderer.setSize( window.innerWidth, window.innerHeight );
    renderer.setSize(window.innerWidth, window.innerHeight); // Set the size of the WebGL viewport.
    document.body.appendChild(renderer.domElement); // Append the WebGL viewport to the DOM.
    camera.position.y = 100
    camera.position.x = -500
    camera.position.z = 0


    var light	= new THREE.HemisphereLight( 0xfffff0, 0x101020, 1.25 );
    light.position.set( 0.75, 1, 0.25 );
    scene.add( light );


    // create skybox here // removed the function containing it to make skyBox globally accessible
        // prepare ShaderMaterial
        var uniforms = {
            texture: { type: 't', value: THREE.ImageUtils.loadTexture('/images/eso_dark.jpg') }
        };
        var skyMaterial = new THREE.ShaderMaterial( {
            uniforms: uniforms,
            vertexShader: document.getElementById('sky-vertex').textContent, fragmentShader: document.getElementById('sky-fragment').textContent
        });

        // create Mesh with sphere geometry and add to the scene
        var skyBox = new THREE.Mesh(new THREE.SphereGeometry(5000, 100, 100), skyMaterial);
        skyBox.scale.set(-1, 1, 1);
        skyBox.eulerOrder = 'XZY';
        skyBox.renderDepth = 500.0;

        scene.add(skyBox);



    // texture for the plane
    var texture = THREE.ImageUtils.loadTexture('/images/moon.jpg');

    var planematerial = new THREE.MeshLambertMaterial( { map: texture } )
    var planegeometry	= new THREE.CircleGeometry( 10000, 10000)

    var plane	= new THREE.Mesh( planegeometry, planematerial );
    plane.rotation.x= - 90 * Math.PI / 180;
    plane.position.y += -210
    scene.add( plane );


    //intitialize the array with the buildings!
    var ListOfBuildings = [];
    var ListOfBillboards = [];
    //initialize the BIG array, which will contain all the values
    var BIGArray = [];
    //initialize one array for each revision
    for (var i in data.revisions){
        var smallArray = [];
        for (var j in data.revisions[i].items){
            smallArray.push(data.revisions[i].items[j]);
        }
        BIGArray.push(smallArray);
    }

    //initialize a variable to keep track of revision (REVISIONID)
    var revisionID = 0;
    var buildingNUM = 0; // <--- used to make sure that new buildings do not overlap old building positions!

    var building = new THREE.BoxGeometry( 1, 1, 1);
    building.applyMatrix( new THREE.Matrix4().makeTranslation( 0, 0.5, 0 ) );


    // base colors for vertexColors. light is for vertices at the top, shadow is for the ones at the bottom
    var light	= new THREE.Color( 0xffffff )
    var shadow	= new THREE.Color( 0x303050 )


    function generateTextureCanvas(){
        // build a small canvas 32x64 and paint it in white
        var canvas	= document.createElement( 'canvas' );
        canvas.width	= 10;
        canvas.height	= 10;
        var context	= canvas.getContext( '2d' );
        context.fillStyle	= '#ffffff';
        context.fillRect( 0, 0, 64, 128 );
        // draw the window rows - with a small noise to simulate light variations in each room
        for( var y = 2; y < 128; y += 2 ){
            for( var x = 0; x < 64; x += 2 ){
                var value	= Math.floor( Math.random() * 128 );
                context.fillStyle = 'rgb(' + [value, value, value].join( ',' )  + ')';
                context.fillRect( x, y, 2, 1 );
            }
        }

        // build a bigger canvas and copy the small one in it
        // This is a trick to upscale the texture without filtering
        var canvas2	= document.createElement( 'canvas' );
        canvas2.width	= 512;
        canvas2.height	= 1024;
        var context	= canvas2.getContext( '2d' );
        // disable smoothing
        context.imageSmoothingEnabled		= false;
        context.webkitImageSmoothingEnabled	= false;
        context.mozImageSmoothingEnabled	= false;
        // then draw the image
        context.drawImage( canvas, 0, 0, canvas2.width, canvas2.height );
        // return the just built canvas2
        //canvas2.add(ground);
        return canvas2;
    }


    var createBuilding = function (y,color) {
        var building = new THREE.BoxGeometry( 1, 1, 1);
        var texture = THREE.ImageUtils.loadTexture( getRandomBuildingTexture() );
        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
        texture.repeat.set(1, (y / 40 > 0 ? y/40 : 1))
        // texture.anisotropy = renderer.getMaxAnisotropy();
                var baseColor   = new THREE.Color().setRGB(1, color, color);

        var material = new THREE.MeshLambertMaterial({
            map: texture,
            wireframe: wireframe,
            color: baseColor,
            // emissive: baseColor
        });


        building.applyMatrix( new THREE.Matrix4().makeTranslation( 0, 0.5, 0 ) );



        var buildingMesh = new THREE.Mesh(building,material);
        buildingMesh.position.x	= getTileCoordinatesx(buildingNUM)*55;
        buildingMesh.position.z	= getTileCoordinatesy(buildingNUM)*55;
        buildingNUM++;
        buildingMesh.scale.x	= 34;
        buildingMesh.scale.y	= y;
        buildingMesh.scale.z	= buildingMesh.scale.x;

        var baseColor	= new THREE.Color().setRGB(1, color, color);
        var topColor	= baseColor.clone().multiply( light );
        var bottomColor	= baseColor.clone().multiply( shadow );

        for ( var j = 0, jl = buildingMesh.geometry.faces.length; j < jl; j ++ ) {
            if ( j === 2 ) {
                buildingMesh.geometry.faces[ j ].vertexColors = [ baseColor, baseColor, baseColor, baseColor ];
            } else {
                // set face.vertexColors on sides faces
                buildingMesh.geometry.faces[ j ].vertexColors = [ topColor, bottomColor, bottomColor, topColor ];
            }
        }
        buildingMesh.geometry.colorsNeedUpdate = true;

        buildingMesh.position.y -= 200;


        buildingMesh.isBuilding = true;
        return buildingMesh;
    }

    //this is the random building texture generator
    var getRandomBuildingTexture = function(){
        var textureList = ['/images/building128.jpg', '/images/glass04.png',
        '/images/glass05.png', '/images/BuildingsHighRise.jpg','/images/BuildingsHighRise2.jpg',
        '/images/glass06.png', '/images/glass08.png'];
        return textureList[Math.floor(Math.random() * 7)];
    }



    var initialize = function () {
        // INITIALIZE THE CITY!!
        for( var i = 0; i < BIGArray[revisionID].length; i++ ){
            var y = BIGArray[revisionID][i].line_count;
            var color=0;
            if (BIGArray[revisionID][i].smell_count<BIGArray[revisionID][i].line_count){
                color = 1-BIGArray[revisionID][i].smell_count/BIGArray[revisionID][i].line_count;
            }
            var buildingMesh = createBuilding(y,color);
            buildingMesh.name = BIGArray[revisionID][i].trackable_name;
            buildingMesh.line_count = BIGArray[revisionID][i].line_count;
            buildingMesh.smell_count = BIGArray[revisionID][i].smell_count;

            ListOfBuildings[hashFnv32a(BIGArray[revisionID][i].trackable_name,false,seed)] = buildingMesh;
            // add it to the scene
            scene.add(buildingMesh);
        }
        raycaster = new THREE.Raycaster();
        document.addEventListener( 'mousemove', onDocumentMouseMove, false );
        window.addEventListener( 'resize', onWindowResize, false );
        document.addEventListener('keydown', onKeyDown, false);
    };

    initialize();



    //initialize difference HASH table
    var buildingDifference = [];

    // update ListOfBuildings

    function updateBuildingList(){

        for( var i = 0; i < BIGArray[revisionID].length; i ++ ){
            // if building does not exist yet, BUILD IT!
            if (ListOfBuildings[hashFnv32a(BIGArray[revisionID][i].trackable_name,false, seed)] == null){
                var y = 0
                //var color = 1-BIGArray[revisionID][i].smell_count*1/5;
                var color=0;
                if (BIGArray[revisionID][i].smell_count<BIGArray[revisionID][i].line_count){
                    color = 1-BIGArray[revisionID][i].smell_count/BIGArray[revisionID][i].line_count;
                }
                var buildingMesh = createBuilding(y,color);
                buildingMesh.name = BIGArray[revisionID][i].trackable_name;
                buildingMesh.line_count = BIGArray[revisionID][i].line_count;
                buildingMesh.smell_count = BIGArray[revisionID][i].smell_count;
                // add building to list of buildings
                ListOfBuildings[hashFnv32a(BIGArray[revisionID][i].trackable_name,false,seed)] = buildingMesh;
                // add it to the scene
                scene.add(buildingMesh);
            }
            // calculate the difference between current and last revision for line_count and smell_count
            var diff_lc = - (ListOfBuildings[hashFnv32a(BIGArray[revisionID][i].trackable_name,false,seed)].scale.y - BIGArray[revisionID][i].line_count) / TRACKER_MAX;
            var new_sc = BIGArray[revisionID][i].smell_count;
            var hashval_ = hashFnv32a(BIGArray[revisionID][i].trackable_name,false,seed);
            var differences = {lc: diff_lc, sc: new_sc, hashval: hashval_};
            buildingDifference[hashFnv32a(BIGArray[revisionID][i].trackable_name,false,seed)] = differences;

        }

    }

    // to keep track of the 10 iterations
    var tracker = TRACKER_MAX;


    //////////////////////////////////////////////////////////////////////////////////
    //		Camera Controls							//
    //////////////////////////////////////////////////////////////////////////////////
    var controls	= new THREE.FirstPersonControls( camera );
    controls.movementSpeed	= 500;
    controls.lookSpeed	= 0.20;
    controls.lookVertical	= true;
    updateFcts.push(function(delta, now){
        controls.update( delta );
    })

    //////////////////////////////////////////////////////////////////////////////////
    //		render the scene						//
    //////////////////////////////////////////////////////////////////////////////////
    updateFcts.push(function(){
        renderer.render( scene, camera );
    })

    //////////////////////////////////////////////////////////////////////////////////
    //		loop runner							//
    //////////////////////////////////////////////////////////////////////////////////
    var lastTimeMsec= null
    var TRACKER_MAX = 25;

    requestAnimationFrame(function animate(nowMsec){
        skyBox.rotation.y += 0.0025
        skyBox.rotation.z += 0.005
        if (revisionID < BIGArray.length){
            if (tracker == TRACKER_MAX){
                // REMOVE BUILDINGS THAT NO LONGER EXIST HERE and creates "terrain" in place of it
            Object.keys(ListOfBuildings).forEach(function (key) { 
                var stillexist = false
                //do something here!
                for (var z = 0; z < BIGArray[revisionID].length; z++){
                    if (hashFnv32a(BIGArray[revisionID][z].trackable_name,false,seed) == key){
                    // check if the name is the same
                        stillexist = true;
                    }
                }
                
                if (stillexist == false){

                    scene.remove(ListOfBuildings[key])
                    var terrain = create_terrain(ListOfBuildings[key].position.x, ListOfBuildings[key].position.z)
                    scene.add(terrain);

                    delete ListOfBuildings[key]
                }
            })
                revisionID++;
                document.getElementById("p1").innerHTML = revisionID;
            }
            // change the building height if tracker is less than 10, otherwise update the building list and reset the tracker!
            if (tracker < TRACKER_MAX){
                var rev = revisionID;
                var lala = BIGArray[revisionID].length;
                for( var i = 0; i < BIGArray[revisionID].length; i++){
                    var key = hashFnv32a(BIGArray[revisionID][i].trackable_name,false,seed);
                    ListOfBuildings[key].scale.y += buildingDifference[key].lc; // update the height of ONLY the ones who are in this current revision!
                    ListOfBuildings[key].material.map.repeat.set(1, (ListOfBuildings[key].scale.y / 40 > 0 ? ListOfBuildings[key].scale.y/40 : 1))


                    ListOfBuildings[key].name = BIGArray[revisionID][i].trackable_name;
                    ListOfBuildings[key].line_count = BIGArray[revisionID][i].line_count;
                    ListOfBuildings[key].smell_count = BIGArray[revisionID][i].smell_count;

                    // update smell count color
                    var color=0;
                    if (BIGArray[revisionID][i].smell_count<BIGArray[revisionID][i].line_count){
                        color = 1-BIGArray[revisionID][i].smell_count/BIGArray[revisionID][i].line_count;
                    }
                    var baseColor	= new THREE.Color().setRGB(1, color, color);
                    var topColor	= baseColor.clone().multiply( light );
                    var bottomColor	= baseColor.clone().multiply( shadow );

                    ListOfBuildings[key].material.color = baseColor;

                }
                tracker++;
            }
            else{
                if (revisionID < BIGArray.length){
                    updateBuildingList();
                    tracker = 0;
                }
            }
        }


        intersect();


        requestAnimationFrame(animate);
        // measure time
        lastTimeMsec	= lastTimeMsec || nowMsec-1000/60
        var deltaMsec	= Math.min(200, nowMsec - lastTimeMsec)
        lastTimeMsec	= nowMsec
        // call each update function
        updateFcts.forEach(function(updateFn){
            updateFn(deltaMsec/1000, nowMsec/1000)
        })
    })

    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );

    }

    function onDocumentMouseMove( event ) {

        event.preventDefault();

        mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
        mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

    }

    function onKeyDown ( event ) {
        if(event.keyCode==67) {
          if(camera.inOrthographicMode){
            camera.toPerspective();
            camera.position.y = 100
            camera.position.x = -500
            camera.position.z = 0
          }else{
            camera.toOrthographic();
            camera.position.y = 0;
            camera.position.x = 0;
            camera.position.z = 0;
          }
        }else if(event.keyCode==71) {
            if(controls.movementSpeed == 500){
                controls.movementSpeed = 0;
                controls.lookSpeed = 0;
            }else{
                controls.movementSpeed = 500;
                controls.lookSpeed = 0.20;
            }
        }
    };

    function updateInfo(object) {
        if (object != null && object.isBuilding != null) {
            $('#smell_count').text(INTERSECTED.smell_count);
            $('#file_name').text(INTERSECTED.name);
            $('#line_count').text(INTERSECTED.line_count);
        } else {
            $('#smell_count').text("null");
            $('#file_name').text("null");
            $('#line_count').text("null");

        }
        
      
    }

    function intersect() {
        var vector = new THREE.Vector3( mouse.x, mouse.y, 1 ).unproject( camera );

        raycaster.set( camera.position, vector.sub( camera.position ).normalize() );

        var intersects = raycaster.intersectObjects( scene.children );

        if ( intersects.length > 0 ) {

            if ( INTERSECTED != intersects[ 0 ].object ) {

                if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );

                INTERSECTED = intersects[ 0 ].object;

                if (INTERSECTED.isBuilding != null) {
                    INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex();
                    INTERSECTED.material.emissive.setHex( 0xffff00 );
                    console.log(INTERSECTED);
                    $('#smell_count').text(INTERSECTED.smell_count);
                    $('#file_name').text(INTERSECTED.name);
                    $('#line_count').text(INTERSECTED.line_count);
                } else {
                    $('#smell_count').text("null");
                    $('#file_name').text("null");
                    $('#line_count').text("null");
                }
                

            }

        } else {

            if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );

            INTERSECTED = null;
            $('#smell_count').text("null");
            $('#file_name').text("null");
            $('#line_count').text("null");

        }
    }

    var terrain_texture   = THREE.ImageUtils.loadTexture('/images/rubble1.jpg');
    var create_terrain = function(x,z){
            var terrain_data = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                0, 40738, 40369, 39483, 37175, 34492, 32436, 31600, 33473, 0,
                                0, 38613, 39605, 40451, 39655, 38843, 38843, 38857, 39042, 0,
                                0, 40738, 33487, 39483, 37175, 34492, 32436, 31600, 33473, 0,
                                0, 38613, 39605, 40451, 39655, 38843, 38843, 38857, 39042, 0,
                                0, 40738, 40369, 39483, 37175, 44753, 32436, 31600, 33473, 0,
                                0, 38613, 39605, 40451, 39655, 38843, 38843, 38857, 39042, 0,
                                0, 40738, 40369, 39483, 37175, 34492, 32436, 31600, 30000, 0,
                                0, 38613, 39605, 40451, 39655, 38843, 38843, 38857, 39042, 0,
                                0, 0, 0, 0, 0, 0, 0, 0, 0, 0] // 100 items inside
            
            var terrain_geo = new THREE.PlaneGeometry(40, 40, 9, 9);
            
            for (var i = 0, l = terrain_geo.vertices.length; i < l; i++) {
                terrain_geo.vertices[i].z = terrain_data[i] *Math.random() / 65535 * 10 ;
            }
            

            var terrain_material = new THREE.MeshPhongMaterial({
                                                               map: texture,
                                                               color: 0xdddddd,
                                                               wireframe: false
                                                               });
            
            var terrain_plane = new THREE.Mesh(terrain_geo, terrain_material);
            terrain_plane.position.y += -200
            terrain_plane.position.x = x
            terrain_plane.position.z = z
            terrain_plane.rotation.x -= 90*Math.PI/180
            //scene.add(terrain_plane);
            return terrain_plane;
        }

</script>
</body>
</html>
		
			
